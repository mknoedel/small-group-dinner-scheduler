/* tslint:disable */
/* eslint-disable */
/**
 * Small Group Dinner API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AddDinnerRequest
 */
export interface AddDinnerRequest {
    /**
     * 
     * @type {string}
     * @memberof AddDinnerRequest
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddDinnerRequest
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof AddDinnerRequest
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddDinnerRequest
     */
    'groupId'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof AddDinnerRequest
     */
    'capacity'?: number;
    /**
     * 
     * @type {string}
     * @memberof AddDinnerRequest
     */
    'signUpMethod'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddDinnerRequest
     */
    'randomSelectionTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddDinnerRequest
     */
    'imageUrl'?: string | null;
}
/**
 * 
 * @export
 * @interface AddGroupRequest
 */
export interface AddGroupRequest {
    /**
     * 
     * @type {string}
     * @memberof AddGroupRequest
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AddGroupRequest
     */
    'description'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof AddGroupRequest
     */
    'isOpen'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AddGroupRequest
     */
    'imageUrl'?: string | null;
}
/**
 * 
 * @export
 * @interface AddHostRequest
 */
export interface AddHostRequest {
    /**
     * 
     * @type {string}
     * @memberof AddHostRequest
     */
    'userId'?: string | null;
}
/**
 * 
 * @export
 * @interface DecideGroupRequest
 */
export interface DecideGroupRequest {
    /**
     * 
     * @type {string}
     * @memberof DecideGroupRequest
     */
    'userId'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof DecideGroupRequest
     */
    'accepted'?: boolean;
}
/**
 * 
 * @export
 * @interface DinnerResponse
 */
export interface DinnerResponse {
    /**
     * 
     * @type {string}
     * @memberof DinnerResponse
     */
    'id'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DinnerResponse
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DinnerResponse
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DinnerResponse
     */
    'groupId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DinnerResponse
     */
    'imageUrl'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DinnerResponse
     */
    'date'?: string;
    /**
     * 
     * @type {number}
     * @memberof DinnerResponse
     */
    'capacity'?: number;
    /**
     * 
     * @type {string}
     * @memberof DinnerResponse
     */
    'signUpMethod'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof DinnerResponse
     */
    'randomSelectionTime'?: string | null;
    /**
     * 
     * @type {Array<UserResponse>}
     * @memberof DinnerResponse
     */
    'hosts'?: Array<UserResponse> | null;
    /**
     * 
     * @type {Array<SignUpResponse>}
     * @memberof DinnerResponse
     */
    'signUps'?: Array<SignUpResponse> | null;
    /**
     * 
     * @type {Array<SignUpResponse>}
     * @memberof DinnerResponse
     */
    'waitList'?: Array<SignUpResponse> | null;
}
/**
 * 
 * @export
 * @interface GroupMemberResponse
 */
export interface GroupMemberResponse {
    /**
     * 
     * @type {string}
     * @memberof GroupMemberResponse
     */
    'id'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GroupMemberResponse
     */
    'firstName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GroupMemberResponse
     */
    'lastName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GroupMemberResponse
     */
    'email'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GroupMemberResponse
     */
    'status'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof GroupMemberResponse
     */
    'isAdmin'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GroupMemberResponse
     */
    'isPending'?: boolean;
}
/**
 * 
 * @export
 * @interface GroupResponse
 */
export interface GroupResponse {
    /**
     * 
     * @type {string}
     * @memberof GroupResponse
     */
    'id'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GroupResponse
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GroupResponse
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GroupResponse
     */
    'imageUrl'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof GroupResponse
     */
    'isOpen'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof GroupResponse
     */
    'createdAt'?: string;
    /**
     * 
     * @type {number}
     * @memberof GroupResponse
     */
    'memberCount'?: number;
}
/**
 * 
 * @export
 * @interface ProblemDetails
 */
export interface ProblemDetails {
    [key: string]: any;

    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'type'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'title'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProblemDetails
     */
    'status'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'detail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'instance'?: string | null;
}
/**
 * 
 * @export
 * @interface RemoveHostRequest
 */
export interface RemoveHostRequest {
    /**
     * 
     * @type {string}
     * @memberof RemoveHostRequest
     */
    'userId'?: string | null;
}
/**
 * 
 * @export
 * @interface SignUpResponse
 */
export interface SignUpResponse {
    /**
     * 
     * @type {string}
     * @memberof SignUpResponse
     */
    'userId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SignUpResponse
     */
    'signUpDate'?: string;
    /**
     * 
     * @type {UserResponse}
     * @memberof SignUpResponse
     */
    'user'?: UserResponse;
}
/**
 * 
 * @export
 * @interface UpdateDinnerRequest
 */
export interface UpdateDinnerRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateDinnerRequest
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateDinnerRequest
     */
    'date'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateDinnerRequest
     */
    'description'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UpdateDinnerRequest
     */
    'capacity'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateDinnerRequest
     */
    'signUpMethod'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateDinnerRequest
     */
    'randomSelectionTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateDinnerRequest
     */
    'imageUrl'?: string | null;
}
/**
 * 
 * @export
 * @interface UpdateGroupRequest
 */
export interface UpdateGroupRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateGroupRequest
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateGroupRequest
     */
    'description'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof UpdateGroupRequest
     */
    'isOpen'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UpdateGroupRequest
     */
    'imageUrl'?: string | null;
}
/**
 * 
 * @export
 * @interface UpdateGroupRoleRequest
 */
export interface UpdateGroupRoleRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateGroupRoleRequest
     */
    'userId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateGroupRoleRequest
     */
    'role'?: string | null;
}
/**
 * 
 * @export
 * @interface UserResponse
 */
export interface UserResponse {
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'id'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'firstName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'lastName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'email'?: string | null;
}

/**
 * DinnerApi - axios parameter creator
 * @export
 */
export const DinnerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dinnerFeedGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Dinner/feed`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {AddHostRequest} [addHostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dinnerIdAddHostPost: async (id: string, addHostRequest?: AddHostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('dinnerIdAddHostPost', 'id', id)
            const localVarPath = `/Dinner/{id}/add-host`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addHostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dinnerIdCancelPost: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('dinnerIdCancelPost', 'id', id)
            const localVarPath = `/Dinner/{id}/cancel`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dinnerIdCancelSignUpPost: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('dinnerIdCancelSignUpPost', 'id', id)
            const localVarPath = `/Dinner/{id}/cancel-sign-up`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dinnerIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('dinnerIdGet', 'id', id)
            const localVarPath = `/Dinner/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateDinnerRequest} [updateDinnerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dinnerIdPut: async (id: string, updateDinnerRequest?: UpdateDinnerRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('dinnerIdPut', 'id', id)
            const localVarPath = `/Dinner/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateDinnerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {RemoveHostRequest} [removeHostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dinnerIdRemoveHostPost: async (id: string, removeHostRequest?: RemoveHostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('dinnerIdRemoveHostPost', 'id', id)
            const localVarPath = `/Dinner/{id}/remove-host`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(removeHostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dinnerIdSignUpPost: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('dinnerIdSignUpPost', 'id', id)
            const localVarPath = `/Dinner/{id}/sign-up`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dinnerMyDinnersGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Dinner/my-dinners`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AddDinnerRequest} [addDinnerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dinnerPost: async (addDinnerRequest?: AddDinnerRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Dinner`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addDinnerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dinnerSearchGet: async (name?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Dinner/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DinnerApi - functional programming interface
 * @export
 */
export const DinnerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DinnerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dinnerFeedGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DinnerResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dinnerFeedGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DinnerApi.dinnerFeedGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {AddHostRequest} [addHostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dinnerIdAddHostPost(id: string, addHostRequest?: AddHostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dinnerIdAddHostPost(id, addHostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DinnerApi.dinnerIdAddHostPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dinnerIdCancelPost(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dinnerIdCancelPost(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DinnerApi.dinnerIdCancelPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dinnerIdCancelSignUpPost(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dinnerIdCancelSignUpPost(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DinnerApi.dinnerIdCancelSignUpPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dinnerIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DinnerResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dinnerIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DinnerApi.dinnerIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateDinnerRequest} [updateDinnerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dinnerIdPut(id: string, updateDinnerRequest?: UpdateDinnerRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dinnerIdPut(id, updateDinnerRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DinnerApi.dinnerIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {RemoveHostRequest} [removeHostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dinnerIdRemoveHostPost(id: string, removeHostRequest?: RemoveHostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dinnerIdRemoveHostPost(id, removeHostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DinnerApi.dinnerIdRemoveHostPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dinnerIdSignUpPost(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dinnerIdSignUpPost(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DinnerApi.dinnerIdSignUpPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dinnerMyDinnersGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DinnerResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dinnerMyDinnersGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DinnerApi.dinnerMyDinnersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {AddDinnerRequest} [addDinnerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dinnerPost(addDinnerRequest?: AddDinnerRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dinnerPost(addDinnerRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DinnerApi.dinnerPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dinnerSearchGet(name?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DinnerResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dinnerSearchGet(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DinnerApi.dinnerSearchGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DinnerApi - factory interface
 * @export
 */
export const DinnerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DinnerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dinnerFeedGet(options?: any): AxiosPromise<Array<DinnerResponse>> {
            return localVarFp.dinnerFeedGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {AddHostRequest} [addHostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dinnerIdAddHostPost(id: string, addHostRequest?: AddHostRequest, options?: any): AxiosPromise<void> {
            return localVarFp.dinnerIdAddHostPost(id, addHostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dinnerIdCancelPost(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.dinnerIdCancelPost(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dinnerIdCancelSignUpPost(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.dinnerIdCancelSignUpPost(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dinnerIdGet(id: string, options?: any): AxiosPromise<DinnerResponse> {
            return localVarFp.dinnerIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateDinnerRequest} [updateDinnerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dinnerIdPut(id: string, updateDinnerRequest?: UpdateDinnerRequest, options?: any): AxiosPromise<void> {
            return localVarFp.dinnerIdPut(id, updateDinnerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {RemoveHostRequest} [removeHostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dinnerIdRemoveHostPost(id: string, removeHostRequest?: RemoveHostRequest, options?: any): AxiosPromise<void> {
            return localVarFp.dinnerIdRemoveHostPost(id, removeHostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dinnerIdSignUpPost(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.dinnerIdSignUpPost(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dinnerMyDinnersGet(options?: any): AxiosPromise<Array<DinnerResponse>> {
            return localVarFp.dinnerMyDinnersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AddDinnerRequest} [addDinnerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dinnerPost(addDinnerRequest?: AddDinnerRequest, options?: any): AxiosPromise<void> {
            return localVarFp.dinnerPost(addDinnerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dinnerSearchGet(name?: string, options?: any): AxiosPromise<Array<DinnerResponse>> {
            return localVarFp.dinnerSearchGet(name, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DinnerApi - object-oriented interface
 * @export
 * @class DinnerApi
 * @extends {BaseAPI}
 */
export class DinnerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DinnerApi
     */
    public dinnerFeedGet(options?: RawAxiosRequestConfig) {
        return DinnerApiFp(this.configuration).dinnerFeedGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {AddHostRequest} [addHostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DinnerApi
     */
    public dinnerIdAddHostPost(id: string, addHostRequest?: AddHostRequest, options?: RawAxiosRequestConfig) {
        return DinnerApiFp(this.configuration).dinnerIdAddHostPost(id, addHostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DinnerApi
     */
    public dinnerIdCancelPost(id: string, options?: RawAxiosRequestConfig) {
        return DinnerApiFp(this.configuration).dinnerIdCancelPost(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DinnerApi
     */
    public dinnerIdCancelSignUpPost(id: string, options?: RawAxiosRequestConfig) {
        return DinnerApiFp(this.configuration).dinnerIdCancelSignUpPost(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DinnerApi
     */
    public dinnerIdGet(id: string, options?: RawAxiosRequestConfig) {
        return DinnerApiFp(this.configuration).dinnerIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateDinnerRequest} [updateDinnerRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DinnerApi
     */
    public dinnerIdPut(id: string, updateDinnerRequest?: UpdateDinnerRequest, options?: RawAxiosRequestConfig) {
        return DinnerApiFp(this.configuration).dinnerIdPut(id, updateDinnerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {RemoveHostRequest} [removeHostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DinnerApi
     */
    public dinnerIdRemoveHostPost(id: string, removeHostRequest?: RemoveHostRequest, options?: RawAxiosRequestConfig) {
        return DinnerApiFp(this.configuration).dinnerIdRemoveHostPost(id, removeHostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DinnerApi
     */
    public dinnerIdSignUpPost(id: string, options?: RawAxiosRequestConfig) {
        return DinnerApiFp(this.configuration).dinnerIdSignUpPost(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DinnerApi
     */
    public dinnerMyDinnersGet(options?: RawAxiosRequestConfig) {
        return DinnerApiFp(this.configuration).dinnerMyDinnersGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AddDinnerRequest} [addDinnerRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DinnerApi
     */
    public dinnerPost(addDinnerRequest?: AddDinnerRequest, options?: RawAxiosRequestConfig) {
        return DinnerApiFp(this.configuration).dinnerPost(addDinnerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [name] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DinnerApi
     */
    public dinnerSearchGet(name?: string, options?: RawAxiosRequestConfig) {
        return DinnerApiFp(this.configuration).dinnerSearchGet(name, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * GroupApi - axios parameter creator
 * @export
 */
export const GroupApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} groupId 
         * @param {DecideGroupRequest} [decideGroupRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupGroupIdDecideGroupRequestPost: async (groupId: string, decideGroupRequest?: DecideGroupRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('groupGroupIdDecideGroupRequestPost', 'groupId', groupId)
            const localVarPath = `/Group/{groupId}/decide-group-request`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(decideGroupRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupGroupIdJoinPost: async (groupId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('groupGroupIdJoinPost', 'groupId', groupId)
            const localVarPath = `/Group/{groupId}/join`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupGroupIdLeavePost: async (groupId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('groupGroupIdLeavePost', 'groupId', groupId)
            const localVarPath = `/Group/{groupId}/leave`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupGroupIdMembersGet: async (groupId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('groupGroupIdMembersGet', 'groupId', groupId)
            const localVarPath = `/Group/{groupId}/members`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} groupId 
         * @param {UpdateGroupRequest} [updateGroupRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupGroupIdPut: async (groupId: string, updateGroupRequest?: UpdateGroupRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('groupGroupIdPut', 'groupId', groupId)
            const localVarPath = `/Group/{groupId}`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateGroupRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} groupId 
         * @param {UpdateGroupRoleRequest} [updateGroupRoleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupGroupIdUpdateRolePost: async (groupId: string, updateGroupRoleRequest?: UpdateGroupRoleRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'groupId' is not null or undefined
            assertParamExists('groupGroupIdUpdateRolePost', 'groupId', groupId)
            const localVarPath = `/Group/{groupId}/update-role`
                .replace(`{${"groupId"}}`, encodeURIComponent(String(groupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateGroupRoleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('groupIdGet', 'id', id)
            const localVarPath = `/Group/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupMyGroupsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Group/my-groups`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {AddGroupRequest} [addGroupRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupPost: async (addGroupRequest?: AddGroupRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Group`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addGroupRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupSearchGet: async (name?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/Group/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GroupApi - functional programming interface
 * @export
 */
export const GroupApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GroupApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} groupId 
         * @param {DecideGroupRequest} [decideGroupRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupGroupIdDecideGroupRequestPost(groupId: string, decideGroupRequest?: DecideGroupRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupGroupIdDecideGroupRequestPost(groupId, decideGroupRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupApi.groupGroupIdDecideGroupRequestPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupGroupIdJoinPost(groupId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupGroupIdJoinPost(groupId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupApi.groupGroupIdJoinPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupGroupIdLeavePost(groupId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupGroupIdLeavePost(groupId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupApi.groupGroupIdLeavePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupGroupIdMembersGet(groupId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GroupMemberResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupGroupIdMembersGet(groupId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupApi.groupGroupIdMembersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} groupId 
         * @param {UpdateGroupRequest} [updateGroupRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupGroupIdPut(groupId: string, updateGroupRequest?: UpdateGroupRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupGroupIdPut(groupId, updateGroupRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupApi.groupGroupIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} groupId 
         * @param {UpdateGroupRoleRequest} [updateGroupRoleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupGroupIdUpdateRolePost(groupId: string, updateGroupRoleRequest?: UpdateGroupRoleRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupGroupIdUpdateRolePost(groupId, updateGroupRoleRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupApi.groupGroupIdUpdateRolePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GroupResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupApi.groupIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupMyGroupsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GroupResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupMyGroupsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupApi.groupMyGroupsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {AddGroupRequest} [addGroupRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupPost(addGroupRequest?: AddGroupRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupPost(addGroupRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupApi.groupPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async groupSearchGet(name?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<GroupResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.groupSearchGet(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['GroupApi.groupSearchGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * GroupApi - factory interface
 * @export
 */
export const GroupApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GroupApiFp(configuration)
    return {
        /**
         * 
         * @param {string} groupId 
         * @param {DecideGroupRequest} [decideGroupRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupGroupIdDecideGroupRequestPost(groupId: string, decideGroupRequest?: DecideGroupRequest, options?: any): AxiosPromise<void> {
            return localVarFp.groupGroupIdDecideGroupRequestPost(groupId, decideGroupRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupGroupIdJoinPost(groupId: string, options?: any): AxiosPromise<string> {
            return localVarFp.groupGroupIdJoinPost(groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupGroupIdLeavePost(groupId: string, options?: any): AxiosPromise<void> {
            return localVarFp.groupGroupIdLeavePost(groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} groupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupGroupIdMembersGet(groupId: string, options?: any): AxiosPromise<Array<GroupMemberResponse>> {
            return localVarFp.groupGroupIdMembersGet(groupId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} groupId 
         * @param {UpdateGroupRequest} [updateGroupRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupGroupIdPut(groupId: string, updateGroupRequest?: UpdateGroupRequest, options?: any): AxiosPromise<void> {
            return localVarFp.groupGroupIdPut(groupId, updateGroupRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} groupId 
         * @param {UpdateGroupRoleRequest} [updateGroupRoleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupGroupIdUpdateRolePost(groupId: string, updateGroupRoleRequest?: UpdateGroupRoleRequest, options?: any): AxiosPromise<void> {
            return localVarFp.groupGroupIdUpdateRolePost(groupId, updateGroupRoleRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupIdGet(id: string, options?: any): AxiosPromise<GroupResponse> {
            return localVarFp.groupIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupMyGroupsGet(options?: any): AxiosPromise<Array<GroupResponse>> {
            return localVarFp.groupMyGroupsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {AddGroupRequest} [addGroupRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupPost(addGroupRequest?: AddGroupRequest, options?: any): AxiosPromise<void> {
            return localVarFp.groupPost(addGroupRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        groupSearchGet(name?: string, options?: any): AxiosPromise<Array<GroupResponse>> {
            return localVarFp.groupSearchGet(name, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GroupApi - object-oriented interface
 * @export
 * @class GroupApi
 * @extends {BaseAPI}
 */
export class GroupApi extends BaseAPI {
    /**
     * 
     * @param {string} groupId 
     * @param {DecideGroupRequest} [decideGroupRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public groupGroupIdDecideGroupRequestPost(groupId: string, decideGroupRequest?: DecideGroupRequest, options?: RawAxiosRequestConfig) {
        return GroupApiFp(this.configuration).groupGroupIdDecideGroupRequestPost(groupId, decideGroupRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} groupId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public groupGroupIdJoinPost(groupId: string, options?: RawAxiosRequestConfig) {
        return GroupApiFp(this.configuration).groupGroupIdJoinPost(groupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} groupId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public groupGroupIdLeavePost(groupId: string, options?: RawAxiosRequestConfig) {
        return GroupApiFp(this.configuration).groupGroupIdLeavePost(groupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} groupId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public groupGroupIdMembersGet(groupId: string, options?: RawAxiosRequestConfig) {
        return GroupApiFp(this.configuration).groupGroupIdMembersGet(groupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} groupId 
     * @param {UpdateGroupRequest} [updateGroupRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public groupGroupIdPut(groupId: string, updateGroupRequest?: UpdateGroupRequest, options?: RawAxiosRequestConfig) {
        return GroupApiFp(this.configuration).groupGroupIdPut(groupId, updateGroupRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} groupId 
     * @param {UpdateGroupRoleRequest} [updateGroupRoleRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public groupGroupIdUpdateRolePost(groupId: string, updateGroupRoleRequest?: UpdateGroupRoleRequest, options?: RawAxiosRequestConfig) {
        return GroupApiFp(this.configuration).groupGroupIdUpdateRolePost(groupId, updateGroupRoleRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public groupIdGet(id: string, options?: RawAxiosRequestConfig) {
        return GroupApiFp(this.configuration).groupIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public groupMyGroupsGet(options?: RawAxiosRequestConfig) {
        return GroupApiFp(this.configuration).groupMyGroupsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {AddGroupRequest} [addGroupRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public groupPost(addGroupRequest?: AddGroupRequest, options?: RawAxiosRequestConfig) {
        return GroupApiFp(this.configuration).groupPost(addGroupRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [name] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GroupApi
     */
    public groupSearchGet(name?: string, options?: RawAxiosRequestConfig) {
        return GroupApiFp(this.configuration).groupSearchGet(name, options).then((request) => request(this.axios, this.basePath));
    }
}



